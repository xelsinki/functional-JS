/* 
    My Curry function

Мы передаем функцию, которую хотим каррировать в curry и сохраняем в замыкании общее количество аргументов
Мы возвращаем новую функцию f1
Мы вызываем функцию f1 и сравниваем ее аргументы с arity
Если они равны, то мы вызываем исходную функцию с этими аргументами и возвращаем результат
Если мы не получили достаточно аргументов, то мы возвращаем новую функцию f2, получаем аргументы, конкатим их с args, которые хранятся в замыкании и вызываем функцию f1 с этими аргументами
У нас выходит рекурсия, которая продолжается до получения достаточно количества аргументов

*/

// В каррировании функция curry в качестве аргумента принимает другую функцию 
var curry = function (fn){

    // Теперь нам необходимо найти общее количество аргументов в функции,
    // которую мы передали на вход. Это можно сделать с помощью .length.
    var arity = fn.length

    console.log('arity', arity)

    // Каррируемая функция всегда возвращает функцию.
    return function f1(...args) {
        console.log('f1 args', args)
        // Если колличество переданых аргументов больше или равно колличеству аргументов в переданной функции
        if (args.length >= arity) {
            console.log('enough arguments')
            // Возващаем функцию с аргументами
            return fn(...args) // Так как args был у нас массивом аргументов, то чтобы его конвертировать обратно в аргументы через запятую - нам нужен spread.
          } else {
            console.log('need more arguments')
            return function f2(...moreArgs) {
                console.log('f2', moreArgs)
                // мы можем сконкатить args и moreArgs, чтобы вызвать функцию f1 с новыми аргументами
                var newArgs = args.concat(moreArgs)
                return f1(...newArgs)
                // То есть у нас получается рекурсия функции f1, которая будет идти, пока мы не получим достаточно аргументов.
              }
          }
      }

}

/* 
    Test module of Curry
*/

// Функция складывает 3 числа, в функции 3 аргумента
var add = function (a, b, c) {
    return a + b + c
  }

  // Вызывает каррирование для функции add
  var curriedAdd = curry(add)

  var result =  curriedAdd(10)(2, 9, 150)

  console.log('result', result)
//   curriedAdd(1)(2, 3)
//   curriedAdd(1, 2, 3)


